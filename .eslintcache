[{"/Users/jeeva/code/jeevadev-web/src/index.js":"1","/Users/jeeva/code/jeevadev-web/src/App.js":"2","/Users/jeeva/code/jeevadev-web/src/reportWebVitals.js":"3","/Users/jeeva/code/jeevadev-web/src/chat/Chat.js":"4","/Users/jeeva/code/jeevadev-web/src/chat/Receiver.js":"5","C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\index.js":"6","C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\App.js":"7","C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\reportWebVitals.js":"8","C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\chat\\Chat.js":"9","C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\chat\\Receiver.js":"10","C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\firebaseinit.js":"11","C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\hero\\Hero.js":"12","C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\hooks.js":"13"},{"size":500,"mtime":1608380383710,"results":"14","hashOfConfig":"15"},{"size":582,"mtime":1608508300802,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1608380383711,"results":"17","hashOfConfig":"15"},{"size":3545,"mtime":1608507220640,"results":"18","hashOfConfig":"15"},{"size":3593,"mtime":1608510369374,"results":"19","hashOfConfig":"15"},{"size":546,"mtime":1610033836045,"results":"20","hashOfConfig":"21"},{"size":481,"mtime":1611900146538,"results":"22","hashOfConfig":"21"},{"size":375,"mtime":1609614488580,"results":"23","hashOfConfig":"21"},{"size":4159,"mtime":1611968865012,"results":"24","hashOfConfig":"21"},{"size":5622,"mtime":1612115182798,"results":"25","hashOfConfig":"21"},{"size":575,"mtime":1610031713022,"results":"26","hashOfConfig":"27"},{"size":2214,"mtime":1611899190684,"results":"28","hashOfConfig":"21"},{"size":507,"mtime":1611899208189,"results":"29","hashOfConfig":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"yqpihi",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"1qbpw46",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dzx2ww",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/Users/jeeva/code/jeevadev-web/src/index.js",[],["60","61"],"/Users/jeeva/code/jeevadev-web/src/App.js",[],"/Users/jeeva/code/jeevadev-web/src/reportWebVitals.js",[],"/Users/jeeva/code/jeevadev-web/src/chat/Chat.js",[],"/Users/jeeva/code/jeevadev-web/src/chat/Receiver.js",[],"C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\index.js",[],["62","63"],"C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\App.js",[],"C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\reportWebVitals.js",[],"C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\chat\\Chat.js",["64"],"import { useState, useRef, useEffect } from 'react';\r\nimport './Chat.css';\r\n\r\nconst socket = new WebSocket('wss://signal.jeeva.dev');\r\nconst configuration = {'iceServers': [{'urls': 'stun:coturn.jeeva.dev:3478', username: 'webapp', credential: 'freepass'}]};\r\nlet peerConnection = new RTCPeerConnection(configuration);\r\n\r\nfunction Chat() {\r\n  const videoRef = useRef();\r\n  const remoteVideoRef = useRef();\r\n  const [videoStream, setVideoStream] = useState(null);\r\n  const [remoteVideoStream, setRemoteVideoStream] = useState(null);\r\n  const [status, setStatus] = useState('');\r\n\r\n  useEffect(() => {\r\n    if(videoStream) {\r\n      videoRef.current.srcObject = videoStream;\r\n      videoStream.getTracks().forEach(track => peerConnection.addTrack(track, videoStream));\r\n      console.log('Added video stream to peer connection');\r\n    }\r\n  }, [videoStream] );\r\n\r\n  useEffect(() => {\r\n    if(remoteVideoStream) {\r\n      remoteVideoRef.current.srcObject = remoteVideoStream;\r\n    }\r\n  }, [remoteVideoStream] );\r\n\r\n  const startVideo = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({audio: true, video: true});\r\n      console.log('Received local stream');\r\n      setVideoStream(stream);\r\n    } catch (e) {\r\n      alert(`getUserMedia() error: ${e.name}`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket.addEventListener('message', async ({data}) => {\r\n      const message = JSON.parse(data);\r\n      console.log(message);\r\n      if (message.answer) {\r\n            const remoteDesc = new RTCSessionDescription(message.answer);\r\n            await peerConnection.setRemoteDescription(remoteDesc);\r\n            console.log('Jeeva is online');\r\n        }\r\n  \r\n      if (message.iceCandidate) {\r\n        try {\r\n            await peerConnection.addIceCandidate(message.iceCandidate);\r\n        } catch (e) {\r\n            console.error('Error adding received ice candidate', e);\r\n        }\r\n      }\r\n  \r\n      if(message.status === 'online' && status === 'calling') {\r\n        setStatus('Connecting...');\r\n        makeCall();\r\n      }\r\n    });\r\n  }, [status]);\r\n\r\n  const makeCall = async function() {\r\n      // setStatus('connecting');\r\n      peerConnection.addEventListener('icecandidate', async (event) => {\r\n        console.log(event);\r\n        if (event.candidate) {\r\n            socket.send(JSON.stringify({iceCandidate: event.candidate}));\r\n        }\r\n      });\r\n\r\n      peerConnection.addEventListener('connectionstatechange', event => {\r\n        if (peerConnection.connectionState === 'connected') {\r\n            // Peers connected!\r\n            console.log('Peers connected');\r\n            setStatus('connected');\r\n        }\r\n      });\r\n\r\n      peerConnection.ontrack = (event) => {\r\n        setRemoteVideoStream(event.streams[0]);\r\n      };\r\n\r\n      const offer = await peerConnection.createOffer();\r\n      await peerConnection.setLocalDescription(offer);\r\n      socket.send(JSON.stringify({'offer': offer}));\r\n  };\r\n\r\n  const hangUp = () => {\r\n    peerConnection.close();\r\n    peerConnection = new RTCPeerConnection(configuration);\r\n    setStatus('');\r\n    videoStream.getTracks().forEach(track => track.stop());\r\n  };\r\n\r\n  const pingJeeva = async () => {\r\n    setStatus('calling');\r\n    await startVideo();\r\n    fetch('https://connect.jeeva.dev/connect');\r\n  };\r\n\r\n  return (\r\n    <div className=\"AppContainer\">\r\n      {/* {status === 'Jeeva is online' && <button onClick={makeCall}>Call</button>} */}\r\n      {status === '' && <a href=\"#\" onClick={pingJeeva} className=\"sec-font btn theme-btn\">Let's Connect <span className=\"lnr lnr-camera-video\"></span></a>}\r\n      <video ref={remoteVideoRef} className={status === 'connected' ? '' : 'hidden'} width={500} height={300} playsInline autoPlay></video>\r\n      <video ref={videoRef} className={(status === 'calling' || status === 'connected') ? '': 'hidden'} width={200} height={200} playsInline autoPlay muted></video>\r\n      <div className='toolbar'>\r\n      {status !== '' && <p>Status - {status}</p> }\r\n      {status === 'connected' && <button className='btn theme-btn hangup' onClick={hangUp}>Hangup</button>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;","C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\chat\\Receiver.js",["65"],"import { useState, useRef, useEffect } from 'react';\r\nimport './Chat.css';\r\n\r\nconst socket = new WebSocket('wss://signal.jeeva.dev');\r\nconst configuration = {'iceServers': [{'urls': 'stun:coturn.jeeva.dev:3478', username: 'webapp', credential: 'freepass'}]};\r\nlet peerConnection = new RTCPeerConnection(configuration);\r\n\r\n// Connection opened\r\nsocket.addEventListener('open', function (event) {\r\n  console.log('socket open');\r\n});\r\n\r\nfunction Receiver() {\r\n  const videoRef = useRef();\r\n  const remoteVideoRef = useRef();\r\n  const [videoStream, setVideoStream] = useState(null);\r\n  const [remoteVideoStream, setRemoteVideoStream] = useState(null);\r\n  const [status, setStatus] = useState('');\r\n\r\n  useEffect(() => {\r\n    if(videoStream) {\r\n      videoRef.current.srcObject = videoStream;\r\n      videoStream.getTracks().forEach(track => peerConnection.addTrack(track, videoStream));\r\n    }\r\n  }, [videoStream] );\r\n\r\n  // useEffect(() => {\r\n  //   if(remoteVideoStream) {\r\n  //     remoteVideoRef.current.srcObject = remoteVideoStream;\r\n  //   }\r\n  // }, [remoteVideoStream] );\r\n\r\n  useEffect(() => {\r\n    const firebaseConfig = {\r\n      apiKey: \"AIzaSyAGOCt6xacdN2B_c4G4SmfaZTPBoK8_C2w\",\r\n      authDomain: \"fleet-radar-299112.firebaseapp.com\",\r\n      projectId: \"fleet-radar-299112\",\r\n      storageBucket: \"fleet-radar-299112.appspot.com\",\r\n      messagingSenderId: \"895377398415\",\r\n      appId: \"1:895377398415:web:0edb13bc5d138b98b3aefa\"\r\n    };\r\n    \r\n    // Initialize Firebase\r\n    window.firebase.initializeApp(firebaseConfig);\r\n    const messaging = window.firebase.messaging();\r\n    messaging.getToken({vapidKey: \"BJWAxinpUXb487t6NHrnt2KkGEGY-vXsHxu7s9p8EH3mhhufu2cBc18QQrAQNABZoGt6BwRn4e4SfPkHGC1F9BE\"});\r\n    // Get registration token. Initially this makes a network call, once retrieved\r\n    // subsequent calls to getToken will return from cache.\r\n    messaging.getToken({vapidKey: 'BJWAxinpUXb487t6NHrnt2KkGEGY-vXsHxu7s9p8EH3mhhufu2cBc18QQrAQNABZoGt6BwRn4e4SfPkHGC1F9BE'}).then(async (currentToken) => {\r\n      if (currentToken) {\r\n        // sendTokenToServer(currentToken);\r\n        const res = await fetch('https://connect.jeeva.dev/register', {\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          method: 'POST',\r\n          mode: 'cors',\r\n          body: JSON.stringify({token: currentToken})\r\n        });\r\n        console.log(res);\r\n      } else {\r\n        console.log('No registration token available. Request permission to generate one.');\r\n      }\r\n    }).catch((err) => {\r\n      console.log('An error occurred while retrieving token. ', err);\r\n    });\r\n\r\n    messaging.onMessage((payload) => {\r\n      console.log('Message received. ', payload);\r\n    });\r\n\r\n    makeCall();\r\n  }, []);\r\n\r\n  const startVideo = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({audio: true, video: true});\r\n      console.log('Received local stream');\r\n      setVideoStream(stream);\r\n    } catch (e) {\r\n      alert(`getUserMedia() error: ${e.name}`);\r\n    }\r\n  };\r\n\r\n  const makeCall = async function() {\r\n      await startVideo();\r\n      setStatus('connecting');\r\n      socket.addEventListener('message', async ({data}) => {\r\n        const message = JSON.parse(data);\r\n        console.log(message);\r\n        if (message.offer) {\r\n            peerConnection.setRemoteDescription(new RTCSessionDescription(message.offer));\r\n            const answer = await peerConnection.createAnswer();\r\n            await peerConnection.setLocalDescription(answer);\r\n            socket.send(JSON.stringify({'answer': answer}));\r\n        }\r\n        if (message.iceCandidate) {\r\n          try {\r\n              await peerConnection.addIceCandidate(message.iceCandidate);\r\n          } catch (e) {\r\n              console.error('Error adding received ice candidate', e);\r\n          }\r\n        }\r\n      });\r\n\r\n      peerConnection.addEventListener('icecandidate', async (event) => {\r\n        console.log(event);\r\n        if (event.candidate) {\r\n            socket.send(JSON.stringify({iceCandidate: event.candidate}));\r\n        }\r\n      });\r\n\r\n      peerConnection.addEventListener('connectionstatechange', event => {\r\n        if (peerConnection.connectionState === 'connected') {\r\n            // Peers connected!\r\n            console.log('Peers connected');\r\n            setStatus('connected');\r\n        }\r\n      });\r\n\r\n      peerConnection.ontrack = (event) => {\r\n        setRemoteVideoStream(event.streams[0]);\r\n        if(videoStream) {\r\n            videoStream.getTracks().forEach(track => peerConnection.addTrack(track, videoStream));\r\n        }\r\n      };\r\n\r\n      socket.send(JSON.stringify({status: 'online'}));\r\n  };\r\n\r\n  const hangUp = () => {\r\n    peerConnection.close();\r\n    peerConnection = new RTCPeerConnection(configuration);\r\n  };\r\n\r\n  const srvs = () => {\r\n    if(remoteVideoStream) {\r\n      remoteVideoRef.current.srcObject = remoteVideoStream;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h3>Chat with client</h3>\r\n      {/* {status === '' && <button onClick={makeCall}>Call</button>} */}\r\n      <video ref={remoteVideoRef} className={status === 'connected' ? '' : 'hidden'} width={500} height={500} playsInline autoPlay></video>\r\n      <video ref={videoRef} className={(status === 'connecting' || status === 'connected') ? '': 'hidden'} width={200} height={200} playsInline autoPlay muted></video>\r\n      {status !== '' && <p>Status - {status}</p> }\r\n      {status === 'connected' && <button onClick={hangUp}>Hangup</button>}\r\n      <button onClick={srvs()}>Answer</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Receiver;","C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\firebaseinit.js",[],"C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\hero\\Hero.js",[],"C:\\Users\\Jeeva\\code\\jeevadev-web\\src\\hooks.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"66","replacedBy":"70"},{"ruleId":"68","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":106,"column":25,"nodeType":"74","endLine":106,"endColumn":92},{"ruleId":"75","severity":1,"message":"76","line":73,"column":6,"nodeType":"77","endLine":73,"endColumn":8,"suggestions":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],["79"],["80"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'makeCall'. Either include it or remove the dependency array.","ArrayExpression",["81"],"no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},"Update the dependencies array to be: [makeCall]",{"range":"84","text":"85"},[2744,2746],"[makeCall]"]